/*Copyright (c) 2002Other World ComputingAll rights reservedRedistribution and use in source and binary forms, with or without modification,are permitted provided that the following conditions are met:1. Redistributions of source code must retain the above copyright notice,   this list of conditions and the following disclaimer as the first lines of   each file.2. Redistributions in binary form must reproduce the above copyright notice,   this list of conditions and the following disclaimer in the documentation and/or   other materials provided with the distribution.3. Redistributions in binary form must retain the link to Other World   Computing's web site in the application's "About Box."This software is provided by Other World Computing ``as is'' and any express or impliedwarranties, including, but not limited to, the implied warranties ofmerchantability and fitness for a particular purpose are disclaimed. In no eventshall Ryan Rempel or Other World Computing be liable for any direct, indirect,incidental, special, exemplary, or consequential damages (including, but notlimited to, procurement of substitute goods or services; loss of use, data, orprofits; or business interruption) however caused and on any theory ofliability, whether in contract, strict liability, or tort (including negligenceor otherwise) arising in any way out of the use of this software, even ifadvised of the possibility of such damage.*/#ifndef __NVRAMVALUE_H__#define __NVRAMVALUE_H__enum NVRAMValueType {	kBooleanValue,	kNumericValue,	kStringValue};class NVRAMValue {	public:		NVRAMValue (const char *name, unsigned offset);		virtual ~NVRAMValue ();			char *getName () {return fName;}		NVRAMValueType getValueType () {return fType;}		unsigned getOffset () {return fOffset;}				virtual char *getStringValue () {return fStringValue;}		virtual bool getBooleanValue () = 0;		virtual long getNumericValue () = 0;				virtual bool setStringValue (const char *value) = 0;		virtual bool setBooleanValue (const bool value) = 0;		virtual bool setNumericValue (const long value) = 0;	protected:		char *fName;		char *fStringValue;		NVRAMValueType fType;		unsigned fOffset;				void setInternalStringValue (const char *value);};class NVRAMBooleanValue : public NVRAMValue {	public:		NVRAMBooleanValue (const char *name, unsigned offset);			virtual bool getBooleanValue ();		virtual long getNumericValue ();				virtual bool setStringValue (const char *value);		virtual bool setBooleanValue (const bool value);		virtual bool setNumericValue (const long value);	private:		bool fValue;};class NVRAMNumericValue : public NVRAMValue {	public:		NVRAMNumericValue (const char *name, unsigned offset);			virtual bool getBooleanValue ();		virtual long getNumericValue ();				virtual bool setStringValue (const char *value);		virtual bool setBooleanValue (const bool value);		virtual bool setNumericValue (const long value);			private:		long fValue;};class NVRAMStringValue : public NVRAMValue {	public:		NVRAMStringValue (const char *name, unsigned offset);			virtual bool getBooleanValue ();		virtual long getNumericValue ();				virtual bool setStringValue (const char *value);		virtual bool setBooleanValue (const bool value);		virtual bool setNumericValue (const long value);};#endif